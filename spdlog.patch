diff --git a/CMakeLists.txt b/CMakeLists.txt
index b98f5509..dadbec64 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -88,9 +88,10 @@ if(WIN32)
     option(SPDLOG_WCHAR_SUPPORT "Support wchar api" OFF)
     option(SPDLOG_WCHAR_FILENAMES "Support wchar filenames" OFF)
 endif()
+
 if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
     option(SPDLOG_CLOCK_COARSE
-           "Use the much faster (but much less accurate) CLOCK_REALTIME_COARSE instead of the regular clock," OFF)
+        "Use the much faster (but much less accurate) CLOCK_REALTIME_COARSE instead of the regular clock," OFF)
 endif()
 
 option(SPDLOG_PREVENT_CHILD_FD "Prevent from child processes to inherit log file descriptors" OFF)
@@ -112,8 +113,12 @@ if(SPDLOG_TIDY)
     message(STATUS "Enabled clang-tidy")
 endif()
 
-find_package(Threads REQUIRED)
+if(NOT QNX)
+    find_package(Threads REQUIRED)
+endif()
+
 message(STATUS "Build type: " ${CMAKE_BUILD_TYPE})
+
 # ---------------------------------------------------------------------------------------
 # Static/Shared library (shared not supported in windows yet)
 # ---------------------------------------------------------------------------------------
@@ -128,11 +133,14 @@ if(SPDLOG_BUILD_SHARED)
         configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.rc.in ${CMAKE_CURRENT_BINARY_DIR}/version.rc @ONLY)
         list(APPEND SPDLOG_SRCS ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
     endif()
+
     add_library(spdlog SHARED ${SPDLOG_SRCS} ${SPDLOG_ALL_HEADERS})
     target_compile_definitions(spdlog PUBLIC SPDLOG_SHARED_LIB)
+
     if(MSVC)
         target_compile_options(spdlog PUBLIC /wd4251 /wd4275)
     endif()
+
     if(NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
         target_compile_definitions(spdlog PRIVATE FMT_EXPORT PUBLIC FMT_SHARED)
     endif()
@@ -144,8 +152,12 @@ add_library(spdlog::spdlog ALIAS spdlog)
 
 target_compile_definitions(spdlog PUBLIC SPDLOG_COMPILED_LIB)
 target_include_directories(spdlog PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>"
-                                         "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
-target_link_libraries(spdlog PUBLIC Threads::Threads)
+    "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
+
+if(NOT QNX)
+    target_link_libraries(spdlog PUBLIC Threads::Threads)
+endif()
+
 spdlog_enable_warnings(spdlog)
 
 set_target_properties(spdlog PROPERTIES VERSION ${SPDLOG_VERSION} SOVERSION ${SPDLOG_VERSION_MAJOR})
@@ -163,7 +175,7 @@ add_library(spdlog_header_only INTERFACE)
 add_library(spdlog::spdlog_header_only ALIAS spdlog_header_only)
 
 target_include_directories(spdlog_header_only INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>"
-                                                        "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
+    "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
 target_link_libraries(spdlog_header_only INTERFACE Threads::Threads)
 
 # ---------------------------------------------------------------------------------------
@@ -173,6 +185,7 @@ if(SPDLOG_FMT_EXTERNAL OR SPDLOG_FMT_EXTERNAL_HO)
     if(NOT TARGET fmt::fmt)
         find_package(fmt 5.3.0 REQUIRED)
     endif()
+
     target_compile_definitions(spdlog PUBLIC SPDLOG_FMT_EXTERNAL)
     target_compile_definitions(spdlog_header_only INTERFACE SPDLOG_FMT_EXTERNAL)
 
@@ -192,6 +205,7 @@ endif()
 # Misc definitions according to tweak options
 # ---------------------------------------------------------------------------------------
 set(SPDLOG_WCHAR_TO_UTF8_SUPPORT ${SPDLOG_WCHAR_SUPPORT})
+
 foreach(
     SPDLOG_OPTION
     SPDLOG_WCHAR_TO_UTF8_SUPPORT
@@ -219,6 +233,7 @@ if(SPDLOG_BUILD_EXAMPLE OR SPDLOG_BUILD_EXAMPLE_HO OR SPDLOG_BUILD_ALL)
     message(STATUS "Generating example(s)")
     add_subdirectory(example)
     spdlog_enable_warnings(example)
+
     if(SPDLOG_BUILD_EXAMPLE_HO)
         spdlog_enable_warnings(example_header_only)
     endif()
@@ -261,7 +276,7 @@ if(SPDLOG_INSTALL)
 
     if(NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
         install(DIRECTORY include/${PROJECT_NAME}/fmt/bundled/
-                DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/fmt/bundled/")
+            DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/fmt/bundled/")
     endif()
 
     # ---------------------------------------------------------------------------------------
diff --git a/bench/CMakeLists.txt b/bench/CMakeLists.txt
index 5a53a252..c583af90 100644
--- a/bench/CMakeLists.txt
+++ b/bench/CMakeLists.txt
@@ -8,15 +8,21 @@ if(NOT TARGET spdlog)
     find_package(spdlog CONFIG REQUIRED)
 endif()
 
-find_package(Threads REQUIRED)
+if(NOT QNX)
+    find_package(Threads REQUIRED)
+endif()
+
 find_package(benchmark CONFIG)
-if (NOT benchmark_FOUND)
+
+if(NOT benchmark_FOUND)
     message(STATUS "Using CMake Version ${CMAKE_VERSION}")
-    if (${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.11.0")
-        # User can fetch googlebenchmark 			
+
+    if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.11.0")
+        # User can fetch googlebenchmark
         message(STATUS "Downloading GoogleBenchmark")
         include(FetchContent)
         set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE INTERNAL "")
+
         # Do not build and run googlebenchmark tests
         FetchContent_Declare(googlebenchmark
             GIT_REPOSITORY https://github.com/google/benchmark.git
diff --git a/cmake/spdlog.pc.in b/cmake/spdlog.pc.in
index 861707c3..04c3d4e0 100644
--- a/cmake/spdlog.pc.in
+++ b/cmake/spdlog.pc.in
@@ -8,6 +8,6 @@ Description: Fast C++ logging library.
 URL: https://github.com/gabime/@PROJECT_NAME@
 Version: @SPDLOG_VERSION@
 CFlags: -I${includedir} @PKG_CONFIG_DEFINES@
-Libs: -L${libdir} -lspdlog -pthread
+Libs: -L${libdir} -lspdlog
 Requires: @PKG_CONFIG_REQUIRES@
 
diff --git a/cmake/spdlogConfig.cmake.in b/cmake/spdlogConfig.cmake.in
index 43ffcf7e..ee6b0f87 100644
--- a/cmake/spdlogConfig.cmake.in
+++ b/cmake/spdlogConfig.cmake.in
@@ -1,7 +1,9 @@
 # Copyright(c) 2019 spdlog authors
 # Distributed under the MIT License (http://opensource.org/licenses/MIT)
 
-find_package(Threads REQUIRED)
+if(NOT QNX)
+    find_package(Threads REQUIRED)
+endif()
 
 set(SPDLOG_FMT_EXTERNAL @SPDLOG_FMT_EXTERNAL@)
 set(config_targets_file @config_targets_file@)
